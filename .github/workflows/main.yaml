
name: Build & Publish Docker image and Helm chart

on:
  workflow_dispatch:
  schedule:
    - cron: '45 6 * * SUN'
  push:
    branches:
      - 'main'
    paths:
      - 'helm/**'
      - 'Dockerfile'
    tags:
      - '*'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'helm/**'
      - 'Dockerfile'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PUBLISH: ${{ startsWith(github.ref, 'refs/tags/') }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        if: ${{ fromJSON(env.PUBLISH) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=semver,pattern=v{{version}}

      - name: Extract metadata for Helm
        id: meta_extra
        shell: bash
        run: |
          strimziImageTag=$(grep 'STRIMZI_VERSION=' Dockerfile | cut -d '=' -f2)
          chartName=$(echo "${{ github.repository }}" | cut -d '/' -f2)

          echo "STRIMZI_TAG=$strimziImageTag" >> $GITHUB_ENV
          echo "CHART_NAME=$chartName" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: /Dockerfile
          push: ${{ fromJSON(env.PUBLISH) }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.STRIMZI_TAG }}
            ${{ steps.meta.outputs.tags }}

      - name: Generate Docker image attestation
        if: ${{ fromJSON(env.PUBLISH) }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.docker.outputs.digest }}
          push-to-registry: true

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0

      - name: Lint Values Files
        uses: ibiqlik/action-yamllint@v3
        if: ${{ ! fromJSON(env.PUBLISH) }}
        with:
          file_or_dir: /helm/**/values*.yaml
          config_data: |
            extends: default
            rules:
              empty-lines: disable
              new-line-at-end-of-file: false
              line-length: disable
              comments: disable
              comments-indentation: disable
              brackets: disable
              indentation:
                spaces: consistent
                indent-sequences: whatever

      - name: Lint Helm Chart
        if: ${{ ! fromJSON(env.PUBLISH) }}
        shell: bash
        working-directory: /helm
        run: |
          helm dependency update $CHART
          helm lint $CHART --values values-test.yaml
          helm template $CHART --values values-test.yaml --skip-crds
        env:
          CHART: ${{ env.CHART_NAME }}

      - name: Publish Helm Chart
        if: ${{ fromJSON(env.PUBLISH) }}
        shell: bash
        working-directory: /helm/${{ env.CHART_NAME }}
        run: |
          sed -i "s|^\(\s*tag:\s*\)latest|\1$IMAGE_TAG|" values.yaml # patch docker image tag
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login $REPO --username ${{ github.actor }} --password-stdin
          helm package . --version $TAG
          helm show chart $CHART-$TAG.tgz
          helm push $CHART-$TAG.tgz oci://$REPO
        env:
          CHART: ${{ env.CHART_NAME }}
          REPO: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          TAG: ${{ github.ref_name }}
          IMAGE_TAG: ${{ env.DOCKER_METADATA_OUTPUT_VERSION }}
